Copyright information

        #T2HTML-TITLE Cygbuild README
        #T2HTML-OPTION --as-is
        #T2HTML-OPTION --css-code-bg
        #T2HTML-OPTION --css-code-note
        #T2HTML-OPTION Note:

        Copyright (C) 2003-2007 Jari Aalto

        All files and documentaton in this project are released under
        GNU General Public License.

        This program (referring to all files distributed in project
        "cygbuild") is free software; you can redistribute it and/or
        modify it under the terms of the GNU General Public License as
        published by the Free Software Foundation; either version 2 of
        the License, or (at your option) any later version.

        This program is distributed in the hope that it will be useful, but
        WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
        General Public License for more details.

        Visit http://www.gnu.org/copyleft/gpl.html

Project Description

    Requirements

        The are no files that would need to be compiled. The project
        uses intepreted languages. The program dependencies are:

        o   Bash            2.04+
        o   Perl            5.004+
        o   GNU make        any version
        o   GNU binutils    any version
        o   GNU gcc         any version

        OS requirements:

        o   Cygwin          any version
        o   Standard *nix utils: awk, sed, ls etc.

        It might be possible to setup a Cygwin cross compiling
        environment in other OS than Windows, but the author has no
        experince on those setups.

    Description

        Short project's description

            Utilities for Cygwin source and binary package
            maintainers. To configure, build, strip, produce diffs and
            generate cygwin specific template files. To put it simply:
            Convert Unix/Linux/Perl package into complete Cygwin Net
            Release distribution.

        Cygbuild is like Debian dh_make(1) .deb or rpm(1) .rpm maker
        utility, but for Cygwin platform. If you are familiar with
        .deb or .rpm making or Activestate Perl .ppm and .ppd files,
        the Cygwin Net release packaging <http://www.cygwin.com> is
        just another variant of these existing packaging methods. The
        process is quite straight forward: one must mirror whole
        system directory structure where the files would go, place the
        les there and wrap all in a package-NN.NN-RELEASE.tar.bz2
        package. The end user installs this premade tar package at
        system root /. This is the methodology of making Cygwin Net
        releases.

        Normally the porting process starts by downloading some Unix or
        Linux package that would be nice to have under Cygwin as well. So
        the porter must

        o   Unpack package (tar.gz)
        o   Configure it (.configure)
        o   Build it .. usually there are some Cygwin work to do (make all)
        o   See if the install method uses install(1), if not, the porter
            must make his own install method

        All of these steps can be automated in a certain degree for
        Unix/Linux packages that use standard packaging shemes like:

        o   Standard GNU packages than include ./configure
        o   Debian .orig.tar.gz packages
        o   Library package (lib*.a etc) => see command 'package-devel'
        o   Standard Perl packages that include Makefile.PL

        If the automatic packaging cannot be use (make all, make install),
        there are custom install files that the porter can tweak. The manual
        explains this in detail (see doc/ directory):

            cygbuild.sh --help

    What are the benefits of using Cygbuild?

        There is much more simple (some ~300 lines) generic bourne shell
        example script at <http://cygwin.com/setup.html> which can also
        be used for maintaining a Cygwin Net Release. Cygbuild has been
        evolved from it and combines "Method One" and "Method Two" and adds
        "Method three++" (automation) from Package Contributor's Guide. The
        advantages are:

        o   You do not have to write separate installation scripts to every
            package. The same script can be used over and over; every time
            you port a new version of some package.
        o   The detection of packaging type (Perl, Library, Stripping of
            *.exe *.dll etc.) is all automatic.
        o   Possibility to to use optional user written external scripts
            which provide modularised way of handling difficult ports.
        o   Extra checks to prevent developer missing things that
            should have been taken cared of; command: [check]
        o   Automatic package.README file update reflaecting the current
            build and release numbers.
        o   Recognizes Perl packages and treats them accordingly.
        o   Ability to package both binary and source packages
            straight from version control sources.
        o   Extensible. Written in bash and uses Perl module cygbuild.pl for
            tasks that are too hard or slow for bash.

    The manual porting method

        If this utility does not provide the rope needed, it is always
        possible to do all manually and start from scratch. Use and tweak
        the Generic build script that is provided at page
        <http://cygwin.com/setup.html>. Read it for detailed information
        how to the Cygwin Net release packaging system works.

Package install instructions

    Installing package

        <see `index.html' for this section>

    Installing from a version control checkout:

        Details how to check out the project can ve found from
        project page. After checkout, help is vailable at:

            make help

        Following command updates current environment to the latest
        versions. The `install-in-place' does not copy the files to
        /usr/bin, but uses symbolic links.

            $ cd <project-dir>/cygbuild
            $ make install-in-place

        After that, to keep project up to date:

            $ cd <project-dir>/cygbuild
            $ git pull

        You may also want to run this make target in order to update
        the templete files to the latest versions

            $ cd <project-dir>/cygbuild
            $ make install-etc

Information for developers

    Policy for documenting changes

        All changes are documented using Emacs editor and standard
        package *add-log.el*, which provides command `C-x' `4' `a' to
        record a change to any file at point. Emacs will pick up the
        main `ChangeLog' file and open a change entry there, whose
        format is:

            * file.txt: (Changed topic,function,heading): Describe
            the change in consequent lines.

        Since all changes are recorded to this file, a copy from
        Changelog can be pasted when making a checkin.

    Makefiles

        The make file logic has been separated into `etc/makefile'
        directory from where they are included to main `Makefile'. If you
        have similar needs to build Cygwin Net releases for other projects,
        it could be possible to copy `cygwin.mk' and use it out of the box.
        The makefiles included are:

            id.mk           Project maintainer information (variables)
            vars.mk         General variables
            unix.mk         Making General Unix targests (clean, install etc.)
            cygwin.mk       Cygwin specific targets (making Net releases)
            net.mk          Network connections

            Makefile        The main controller, additional targests
                            needed in project file, which cannot be
                            used generally.

    Making binary package

        First, make world release. It is a preliminary step for Cygwin
        release

            make release-world

        Now Cygwin binary and source packages can be done with these steps.
        The first make target will make the package and the `list-cygwin'
        shows the content of the package. The source package (not really
        needed) is done with: make release-cygwin-source.

            make RELEASE=1 release-cygwin-bin
            make list-cygwin

        The package can be put to local Apache web server's publish
        area with make target: 'make publish-cygwin'. See RELEASEDIR
        variable in etc/makefile/* for more information.

    Releasing package

        A ready package is found under directory `.build/' and it can be
        uploaded:

                 make USER=username sf-upload-release

        Log in to project, go to project page and select [Admin] page
        in which there is a button to [File Releases] page. Follow the
        page's instructions and use button [add release]. The release
        name is YYYY.MMDD.

        The "File Type" is set as "i386" ".exe; 32-bit Windows" to signify
        that this project is solely for Windows and the package files is
        "binary" release, which should be unpacked in place.

        To upload documentation, use following make target and login
        name:

            make USER=<SF_LOGINNAME> sf-upload-doc

        To make package available for Cygwin setup.exe installer:

            make cygwin-setup-ini-update
            make USER=<SF_LOGINNAME> sf-upload-cygwin-setup-ini
            make USER=<SF_LOGINNAME> sf-upload-cygwin-release

    Source package note

        See make target `release-cygwin-source'.

    Exporting development

        There is a make target `release-world' that makes a tar.gz
        file from checkout. Should that ever be needed. This target
        can be used to make a backup of the project without version
        control insformation and temporary files.

    Converting text files into HTML

        In order to convert text files (README) into HTML, program
        *t2html.pl* is needed. See http://perl-text2html.sourceforge.net/

End of file
